##! /usr/bin/python
# auto_DoseCalc.py
"""calculate Dose using DoseEngine given CT, plan, RT structure and calculate the DVH metrics."""
# this script need a DoseEngine to be installed in your pc!!!
# Copyright (c) 2018- Ziyuan
# Copyright (c) 2018- Marco Virgolin

import os
import sys
import shutil
import threading
import time

import pydicom
import numpy as np
from math import log10, floor
import glob
from dvhcalc import * 
import logging
from Dose_accumulation import *

def printpage():
    print "---------------Help info--------------"
    print "Script for auto dose caculation! Mode: FILE or DIR. Two types of usage:"
    print "python auto_DoseCalc.py FILE refplan surID"
    print "python auto_DoseCalc.py DIR "
    print "..."
    print "default: dir_plan: ../data/autoPlans/; dir_patients: ../data/CT_data/; if refID==surID, dir_plan: ../data/ref_plans/; d_RS = ../data/data_RS/ dir_dose = ../data/auto_Dose/ "
    print "optional (set options at the end): -dir_plan PATH(end with /) -dir_patients PATH -dir_m PATH -dir_RS PATH -dir_dose -dir_DVH PATH"
    quit()

d_patients = "../data/CT_data/"
def checkCalcDoseTerminated(path_to_output_dir):
    start = time.time()
    print 'Thread started to ensure that CalcDose.exe does not get stuck on', path_to_output_dir
    is_running = True
    while is_running:
        time.sleep(2)
        num_rd_files = 0
        for file in os.listdir(path_to_output_dir):
            if file.startswith('RD'):
                num_rd_files += 1
        if num_rd_files > 1: # at list two dose files generated
            is_running = False
            print 'Dose files generated, quit the controlling thread on', path_to_output_dir
            time.sleep(1)
            os.system('Taskkill /IM Bom.exe /F')
            #when dose file generated, quit this function (in this case calcdose.exe already finished by itself)
        curr = time.time() - start
        if curr > 180:
            is_running = False
            print 'No news from CalcDose.exe after 3 minutes, attempting forced termination of CalcDose.exe and aborting this thred', path_to_output_dir
            os.system('Taskkill /IM CalcDose.exe /F') # when no news, try to kill calc
            os.system('Taskkill /IM Bom.exe /F')
    return

def performDoseCalculation(refplan, surID,d_plan,dose_dir=dose_dir):
    surPatient = d_patients + surID+'/' # all the patients should be named as institue+'_'+anonymized ID 
    print 'calculate dose for plan ' + refplan + ' on patient ' + surID
    try:
        DoseCalc(surPatient,refplan+'.'+surID,d_plan,dose_dir)
    except ValueError as e:
        raise ValueError('DoseCalc failed')

def DoseCalc(surPatient, IDpair, d_plan,dose_dir=dose_dir):
    planname='RP.ref' + IDpair + '.dcm'
    autoPlan = d_plan +planname
    tempPlan = surPatient + planname
    if (not os.path.exists(surPatient)) or (not os.path.exists(autoPlan)):
        print 'Error! Some files do not exist!'
        raise ValueError('files missing for DoseCalc')
    
    shutil.copy(autoPlan,tempPlan)
    # start a process that checks for CalcDose gettin stuck; and terminates it if it happens
    controlling_stuckness_thread = threading.Thread(target=checkCalcDoseTerminated, args=[surPatient])

    controlling_stuckness_thread.start()
    os.system('C:/DoseEngine/Software32_v4.3/CalcDose.exe ' + '--patient=' + surPatient + ' --debug') # specifile the path CalcDose.exe was installed!
    if controlling_stuckness_thread.isAlive():
        controlling_stuckness_thread.killed = True
        controlling_stuckness_thread.join()


    #os.system('Taskkill /IM Bom.exe /F')
    #os.system('Taskkill /IM dcmdump.exe /F')
    #os.system('Taskkill /IM OTP_dmdq.exe /F')
    time.sleep(2)
    
    autoDose_ini= dose_dir+ 'RD.ref' + IDpair
    ii=0
    for file in os.listdir(surPatient):
        if 'RD' in file:
            ii=ii+1
            dose_dest=autoDose_ini + '.'+str(ii)+'.dcm'
            file_ini = surPatient+file
            if os.path.isfile(dose_dest):
                os.remove(dose_dest)
        
            os.rename(file_ini,dose_dest)
    print(tempPlan)
    os.remove(tempPlan)              

    # check it failed
    if ii < 2:
        print 'DoseCalc.exe failed on', surPatient
        raise ValueError('DoseCalc failed')

def round_sig(x,sig=2):
    return round(x, sig-int(floor(log10(abs(x))))-1)

def main():
    d_plan = '../data/autoPlans/'
    d_patients = '../data/CT_data/'
    d_RS = '../data/data_RS/'
    d_DVH = '../data/dvh/'
    #process all the measurements files generated by matlab code, translate the coordinates to CT system
    dose_dir = '../data/auto_Dose/'
    
    if len(sys.argv) == 1: #if no parameter
        printpage()
    elif ( len(sys.argv) == 2 and sys.argv[1] == '-help' ): #if user ask for -help
        printpage()
    # set custom options if present
    for i in range(2, len(sys.argv)):
        if sys.argv[i] == '-dir_plan':
            d_plan = sys.argv[i+1]
        elif sys.argv[i] == '-dir_patients':
            d_patients = sys.argv[i+1]
        elif sys.argv[i] == '-dir_RS':
            d_RS = sys.argv[i+1]
        elif sys.argv[i] == '-dir_dose':
            dose_dir = sys.argv[i+1]
        elif sys.argv[i] =='-dir_DVH':
            d_DVH = sys.argv[i+1]

    if not os.path.exists(dose_dir):
        os.makedirs(dose_dir) 
    # FILE mode
    # reconstruct the specific reference plan (ID) and surrogate patient (ID)
    if sys.argv[1] == 'FILE':
        
        refplan = sys.argv[2]
        surID = sys.argv[3]
        try:
            performDoseCalculation(refplan, surID,d_plan,dose_dir)
            Dose_accumulation(refplan,surID,d_plan,dose_dir)
            autoRP = "RP.ref"+refplan+"."+surID+".dcm"
        except ValueError as e:
            print e
            
        rtssfile = d_RS + "RS." + surID +".dcm"
        rtdosefile = dose_dir + "RD.00.ref" + refplan + "." + surID + ".dcm"
        print rtssfile, rtdosefile
        outputfile = d_DVH + 'DVHmetrics_plan' + refplan + '.txt'
        #DVHmetrics= calDVHmetrics(rtssfile,rtdosefile)
        calDVHmetrics(rtssfile,rtdosefile,outputfile)
        print 'Finished processing! Automaic dose saved at', dose_dir
    # DIR mode
    # calculate dose for all the auto plans saved dir_plan on correspondent surrogate patients 
    elif sys.argv[1] == 'DIR':

        for autoRP in os.listdir(d_plan):
            
            # skip non-.dcm files
            if not autoRP.endswith('.dcm'):
                continue
            tempIDs = autoRP[ autoRP.rfind('ref')+3 : autoRP.rfind('.dcm') ]
            refplan = tempIDs[0: tempIDs.rfind('.')]
            surID = tempIDs[tempIDs.rfind('.')+1: len(tempIDs)]
            try:
                performDoseCalculation(refplan, surID,d_plan,dose_dir)
                Dose_accumulation(refplan,surID,d_plan,dose_dir)
            except ValueError as e:
                print e
                shutil.copyfile(d_plan+autoRP,'../autoPlans_error/'+autoRP)
                continue
            
            rtssfile = d_RS + "RS." + surID +".dcm"
            rtdosefile = dose_dir + "RD.00.ref" + refplan + "." + surID + ".dcm" 
            outputfile = d_DVH + 'DVHmetrics_plan' + refplan + '.txt' 
            calDVHmetrics(rtssfile,rtdosefile,outputfile)
            print 'Finished processing! Automaic dose saved at', dose_dir


    else:
         print "Wrong mode, please specify between FILE and DIR: ..."

         printpage()


if __name__ == "__main__":
    main()
